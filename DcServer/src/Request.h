/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Request_H
#define Request_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "request_types.h"

namespace DcCluster {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RequestIf {
 public:
  virtual ~RequestIf() {}
  virtual bool ClusterWork(const std::string& msg) = 0;
};

class RequestIfFactory {
 public:
  typedef RequestIf Handler;

  virtual ~RequestIfFactory() {}

  virtual RequestIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RequestIf* /* handler */) = 0;
};

class RequestIfSingletonFactory : virtual public RequestIfFactory {
 public:
  RequestIfSingletonFactory(const boost::shared_ptr<RequestIf>& iface) : iface_(iface) {}
  virtual ~RequestIfSingletonFactory() {}

  virtual RequestIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RequestIf* /* handler */) {}

 protected:
  boost::shared_ptr<RequestIf> iface_;
};

class RequestNull : virtual public RequestIf {
 public:
  virtual ~RequestNull() {}
  bool ClusterWork(const std::string& /* msg */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _Request_ClusterWork_args__isset {
  _Request_ClusterWork_args__isset() : msg(false) {}
  bool msg :1;
} _Request_ClusterWork_args__isset;

class Request_ClusterWork_args {
 public:

  Request_ClusterWork_args(const Request_ClusterWork_args&);
  Request_ClusterWork_args& operator=(const Request_ClusterWork_args&);
  Request_ClusterWork_args() : msg() {
  }

  virtual ~Request_ClusterWork_args() throw();
  std::string msg;

  _Request_ClusterWork_args__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const Request_ClusterWork_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const Request_ClusterWork_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Request_ClusterWork_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Request_ClusterWork_pargs {
 public:


  virtual ~Request_ClusterWork_pargs() throw();
  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Request_ClusterWork_result__isset {
  _Request_ClusterWork_result__isset() : success(false) {}
  bool success :1;
} _Request_ClusterWork_result__isset;

class Request_ClusterWork_result {
 public:

  Request_ClusterWork_result(const Request_ClusterWork_result&);
  Request_ClusterWork_result& operator=(const Request_ClusterWork_result&);
  Request_ClusterWork_result() : success(0) {
  }

  virtual ~Request_ClusterWork_result() throw();
  bool success;

  _Request_ClusterWork_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Request_ClusterWork_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Request_ClusterWork_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Request_ClusterWork_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Request_ClusterWork_presult__isset {
  _Request_ClusterWork_presult__isset() : success(false) {}
  bool success :1;
} _Request_ClusterWork_presult__isset;

class Request_ClusterWork_presult {
 public:


  virtual ~Request_ClusterWork_presult() throw();
  bool* success;

  _Request_ClusterWork_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RequestClient : virtual public RequestIf {
 public:
  RequestClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RequestClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ClusterWork(const std::string& msg);
  void send_ClusterWork(const std::string& msg);
  bool recv_ClusterWork();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RequestProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RequestIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RequestProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ClusterWork(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RequestProcessor(boost::shared_ptr<RequestIf> iface) :
    iface_(iface) {
    processMap_["ClusterWork"] = &RequestProcessor::process_ClusterWork;
  }

  virtual ~RequestProcessor() {}
};

class RequestProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RequestProcessorFactory(const ::boost::shared_ptr< RequestIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RequestIfFactory > handlerFactory_;
};

class RequestMultiface : virtual public RequestIf {
 public:
  RequestMultiface(std::vector<boost::shared_ptr<RequestIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RequestMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RequestIf> > ifaces_;
  RequestMultiface() {}
  void add(boost::shared_ptr<RequestIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool ClusterWork(const std::string& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ClusterWork(msg);
    }
    return ifaces_[i]->ClusterWork(msg);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RequestConcurrentClient : virtual public RequestIf {
 public:
  RequestConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RequestConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ClusterWork(const std::string& msg);
  int32_t send_ClusterWork(const std::string& msg);
  bool recv_ClusterWork(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
