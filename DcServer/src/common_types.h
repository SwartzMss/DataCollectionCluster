/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef common_TYPES_H
#define common_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace DcCluster {

struct RegistResult {
  enum type {
    SUCCESS = 0,
    INVALIE_PARA = 1,
    UNDEFINE_ERR = 2
  };
};

extern const std::map<int, const char*> _RegistResult_VALUES_TO_NAMES;

class ClientInfo;

class HeartBeatInfo;

typedef struct _ClientInfo__isset {
  _ClientInfo__isset() : Ip(false), Port(false), msg(false) {}
  bool Ip :1;
  bool Port :1;
  bool msg :1;
} _ClientInfo__isset;

class ClientInfo : public virtual ::apache::thrift::TBase {
 public:

  ClientInfo(const ClientInfo&);
  ClientInfo& operator=(const ClientInfo&);
  ClientInfo() : Ip(), Port(0), msg() {
  }

  virtual ~ClientInfo() throw();
  std::string Ip;
  int32_t Port;
  std::string msg;

  _ClientInfo__isset __isset;

  void __set_Ip(const std::string& val);

  void __set_Port(const int32_t val);

  void __set_msg(const std::string& val);

  bool operator == (const ClientInfo & rhs) const
  {
    if (!(Ip == rhs.Ip))
      return false;
    if (!(Port == rhs.Port))
      return false;
    if (__isset.msg != rhs.__isset.msg)
      return false;
    else if (__isset.msg && !(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ClientInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ClientInfo &a, ClientInfo &b);

inline std::ostream& operator<<(std::ostream& out, const ClientInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _HeartBeatInfo__isset {
  _HeartBeatInfo__isset() : Ip(false), Port(false), msg(false) {}
  bool Ip :1;
  bool Port :1;
  bool msg :1;
} _HeartBeatInfo__isset;

class HeartBeatInfo : public virtual ::apache::thrift::TBase {
 public:

  HeartBeatInfo(const HeartBeatInfo&);
  HeartBeatInfo& operator=(const HeartBeatInfo&);
  HeartBeatInfo() : Ip(), Port(0), msg() {
  }

  virtual ~HeartBeatInfo() throw();
  std::string Ip;
  int32_t Port;
  std::string msg;

  _HeartBeatInfo__isset __isset;

  void __set_Ip(const std::string& val);

  void __set_Port(const int32_t val);

  void __set_msg(const std::string& val);

  bool operator == (const HeartBeatInfo & rhs) const
  {
    if (!(Ip == rhs.Ip))
      return false;
    if (!(Port == rhs.Port))
      return false;
    if (__isset.msg != rhs.__isset.msg)
      return false;
    else if (__isset.msg && !(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const HeartBeatInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartBeatInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HeartBeatInfo &a, HeartBeatInfo &b);

inline std::ostream& operator<<(std::ostream& out, const HeartBeatInfo& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
