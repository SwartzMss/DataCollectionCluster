/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "common_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace DcCluster {

int _kRegistResultValues[] = {
  RegistResult::SUCCESS,
  RegistResult::INVALIE_PARA,
  RegistResult::UNDEFINE_ERR
};
const char* _kRegistResultNames[] = {
  "SUCCESS",
  "INVALIE_PARA",
  "UNDEFINE_ERR"
};
const std::map<int, const char*> _RegistResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kRegistResultValues, _kRegistResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


ClientInfo::~ClientInfo() throw() {
}


void ClientInfo::__set_Ip(const std::string& val) {
  this->Ip = val;
}

void ClientInfo::__set_Port(const int32_t val) {
  this->Port = val;
}

void ClientInfo::__set_msg(const std::string& val) {
  this->msg = val;
__isset.msg = true;
}

uint32_t ClientInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Ip);
          this->__isset.Ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Port);
          this->__isset.Port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ClientInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClientInfo");

  xfer += oprot->writeFieldBegin("Ip", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Port", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Port);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.msg) {
    xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->msg);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClientInfo &a, ClientInfo &b) {
  using ::std::swap;
  swap(a.Ip, b.Ip);
  swap(a.Port, b.Port);
  swap(a.msg, b.msg);
  swap(a.__isset, b.__isset);
}

ClientInfo::ClientInfo(const ClientInfo& other0) {
  Ip = other0.Ip;
  Port = other0.Port;
  msg = other0.msg;
  __isset = other0.__isset;
}
ClientInfo& ClientInfo::operator=(const ClientInfo& other1) {
  Ip = other1.Ip;
  Port = other1.Port;
  msg = other1.msg;
  __isset = other1.__isset;
  return *this;
}
void ClientInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClientInfo(";
  out << "Ip=" << to_string(Ip);
  out << ", " << "Port=" << to_string(Port);
  out << ", " << "msg="; (__isset.msg ? (out << to_string(msg)) : (out << "<null>"));
  out << ")";
}


HeartBeatInfo::~HeartBeatInfo() throw() {
}


void HeartBeatInfo::__set_Ip(const std::string& val) {
  this->Ip = val;
}

void HeartBeatInfo::__set_Port(const int32_t val) {
  this->Port = val;
}

void HeartBeatInfo::__set_msg(const std::string& val) {
  this->msg = val;
__isset.msg = true;
}

uint32_t HeartBeatInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Ip);
          this->__isset.Ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Port);
          this->__isset.Port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeartBeatInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeartBeatInfo");

  xfer += oprot->writeFieldBegin("Ip", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Port", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Port);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.msg) {
    xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->msg);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeartBeatInfo &a, HeartBeatInfo &b) {
  using ::std::swap;
  swap(a.Ip, b.Ip);
  swap(a.Port, b.Port);
  swap(a.msg, b.msg);
  swap(a.__isset, b.__isset);
}

HeartBeatInfo::HeartBeatInfo(const HeartBeatInfo& other2) {
  Ip = other2.Ip;
  Port = other2.Port;
  msg = other2.msg;
  __isset = other2.__isset;
}
HeartBeatInfo& HeartBeatInfo::operator=(const HeartBeatInfo& other3) {
  Ip = other3.Ip;
  Port = other3.Port;
  msg = other3.msg;
  __isset = other3.__isset;
  return *this;
}
void HeartBeatInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeartBeatInfo(";
  out << "Ip=" << to_string(Ip);
  out << ", " << "Port=" << to_string(Port);
  out << ", " << "msg="; (__isset.msg ? (out << to_string(msg)) : (out << "<null>"));
  out << ")";
}

} // namespace
