/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Regist_H
#define Regist_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "register_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RegistIf {
 public:
  virtual ~RegistIf() {}
  virtual  ::DcCluster::RegistResult::type registClient(const  ::DcCluster::ClientInfo& clientInfo) = 0;
  virtual bool heartbeat(const  ::DcCluster::HeartBeatInfo& heartbeatInfo) = 0;
};

class RegistIfFactory {
 public:
  typedef RegistIf Handler;

  virtual ~RegistIfFactory() {}

  virtual RegistIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RegistIf* /* handler */) = 0;
};

class RegistIfSingletonFactory : virtual public RegistIfFactory {
 public:
  RegistIfSingletonFactory(const boost::shared_ptr<RegistIf>& iface) : iface_(iface) {}
  virtual ~RegistIfSingletonFactory() {}

  virtual RegistIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RegistIf* /* handler */) {}

 protected:
  boost::shared_ptr<RegistIf> iface_;
};

class RegistNull : virtual public RegistIf {
 public:
  virtual ~RegistNull() {}
   ::DcCluster::RegistResult::type registClient(const  ::DcCluster::ClientInfo& /* clientInfo */) {
     ::DcCluster::RegistResult::type _return = ( ::DcCluster::RegistResult::type)0;
    return _return;
  }
  bool heartbeat(const  ::DcCluster::HeartBeatInfo& /* heartbeatInfo */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _Regist_registClient_args__isset {
  _Regist_registClient_args__isset() : clientInfo(false) {}
  bool clientInfo :1;
} _Regist_registClient_args__isset;

class Regist_registClient_args {
 public:

  Regist_registClient_args(const Regist_registClient_args&);
  Regist_registClient_args& operator=(const Regist_registClient_args&);
  Regist_registClient_args() {
  }

  virtual ~Regist_registClient_args() throw();
   ::DcCluster::ClientInfo clientInfo;

  _Regist_registClient_args__isset __isset;

  void __set_clientInfo(const  ::DcCluster::ClientInfo& val);

  bool operator == (const Regist_registClient_args & rhs) const
  {
    if (!(clientInfo == rhs.clientInfo))
      return false;
    return true;
  }
  bool operator != (const Regist_registClient_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Regist_registClient_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Regist_registClient_pargs {
 public:


  virtual ~Regist_registClient_pargs() throw();
  const  ::DcCluster::ClientInfo* clientInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Regist_registClient_result__isset {
  _Regist_registClient_result__isset() : success(false) {}
  bool success :1;
} _Regist_registClient_result__isset;

class Regist_registClient_result {
 public:

  Regist_registClient_result(const Regist_registClient_result&);
  Regist_registClient_result& operator=(const Regist_registClient_result&);
  Regist_registClient_result() : success(( ::DcCluster::RegistResult::type)0) {
  }

  virtual ~Regist_registClient_result() throw();
   ::DcCluster::RegistResult::type success;

  _Regist_registClient_result__isset __isset;

  void __set_success(const  ::DcCluster::RegistResult::type val);

  bool operator == (const Regist_registClient_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Regist_registClient_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Regist_registClient_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Regist_registClient_presult__isset {
  _Regist_registClient_presult__isset() : success(false) {}
  bool success :1;
} _Regist_registClient_presult__isset;

class Regist_registClient_presult {
 public:


  virtual ~Regist_registClient_presult() throw();
   ::DcCluster::RegistResult::type* success;

  _Regist_registClient_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Regist_heartbeat_args__isset {
  _Regist_heartbeat_args__isset() : heartbeatInfo(false) {}
  bool heartbeatInfo :1;
} _Regist_heartbeat_args__isset;

class Regist_heartbeat_args {
 public:

  Regist_heartbeat_args(const Regist_heartbeat_args&);
  Regist_heartbeat_args& operator=(const Regist_heartbeat_args&);
  Regist_heartbeat_args() {
  }

  virtual ~Regist_heartbeat_args() throw();
   ::DcCluster::HeartBeatInfo heartbeatInfo;

  _Regist_heartbeat_args__isset __isset;

  void __set_heartbeatInfo(const  ::DcCluster::HeartBeatInfo& val);

  bool operator == (const Regist_heartbeat_args & rhs) const
  {
    if (!(heartbeatInfo == rhs.heartbeatInfo))
      return false;
    return true;
  }
  bool operator != (const Regist_heartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Regist_heartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Regist_heartbeat_pargs {
 public:


  virtual ~Regist_heartbeat_pargs() throw();
  const  ::DcCluster::HeartBeatInfo* heartbeatInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Regist_heartbeat_result__isset {
  _Regist_heartbeat_result__isset() : success(false) {}
  bool success :1;
} _Regist_heartbeat_result__isset;

class Regist_heartbeat_result {
 public:

  Regist_heartbeat_result(const Regist_heartbeat_result&);
  Regist_heartbeat_result& operator=(const Regist_heartbeat_result&);
  Regist_heartbeat_result() : success(0) {
  }

  virtual ~Regist_heartbeat_result() throw();
  bool success;

  _Regist_heartbeat_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Regist_heartbeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Regist_heartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Regist_heartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Regist_heartbeat_presult__isset {
  _Regist_heartbeat_presult__isset() : success(false) {}
  bool success :1;
} _Regist_heartbeat_presult__isset;

class Regist_heartbeat_presult {
 public:


  virtual ~Regist_heartbeat_presult() throw();
  bool* success;

  _Regist_heartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RegistClient : virtual public RegistIf {
 public:
  RegistClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RegistClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::DcCluster::RegistResult::type registClient(const  ::DcCluster::ClientInfo& clientInfo);
  void send_registClient(const  ::DcCluster::ClientInfo& clientInfo);
   ::DcCluster::RegistResult::type recv_registClient();
  bool heartbeat(const  ::DcCluster::HeartBeatInfo& heartbeatInfo);
  void send_heartbeat(const  ::DcCluster::HeartBeatInfo& heartbeatInfo);
  bool recv_heartbeat();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RegistProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RegistIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RegistProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_registClient(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_heartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RegistProcessor(boost::shared_ptr<RegistIf> iface) :
    iface_(iface) {
    processMap_["registClient"] = &RegistProcessor::process_registClient;
    processMap_["heartbeat"] = &RegistProcessor::process_heartbeat;
  }

  virtual ~RegistProcessor() {}
};

class RegistProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RegistProcessorFactory(const ::boost::shared_ptr< RegistIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RegistIfFactory > handlerFactory_;
};

class RegistMultiface : virtual public RegistIf {
 public:
  RegistMultiface(std::vector<boost::shared_ptr<RegistIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RegistMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RegistIf> > ifaces_;
  RegistMultiface() {}
  void add(boost::shared_ptr<RegistIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
   ::DcCluster::RegistResult::type registClient(const  ::DcCluster::ClientInfo& clientInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registClient(clientInfo);
    }
    return ifaces_[i]->registClient(clientInfo);
  }

  bool heartbeat(const  ::DcCluster::HeartBeatInfo& heartbeatInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->heartbeat(heartbeatInfo);
    }
    return ifaces_[i]->heartbeat(heartbeatInfo);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RegistConcurrentClient : virtual public RegistIf {
 public:
  RegistConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RegistConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::DcCluster::RegistResult::type registClient(const  ::DcCluster::ClientInfo& clientInfo);
  int32_t send_registClient(const  ::DcCluster::ClientInfo& clientInfo);
   ::DcCluster::RegistResult::type recv_registClient(const int32_t seqid);
  bool heartbeat(const  ::DcCluster::HeartBeatInfo& heartbeatInfo);
  int32_t send_heartbeat(const  ::DcCluster::HeartBeatInfo& heartbeatInfo);
  bool recv_heartbeat(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
